services:
  db:
    image: postgis/postgis:15-3.3
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DB: ${POSTGRES_DB:-cruise}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  geoserver:
    image: kartoza/geoserver:2.25.2
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      GEOSERVER_ADMIN_USER: ${GEOSERVER_ADMIN_USER:-admin}
      GEOSERVER_ADMIN_PASSWORD: ${GEOSERVER_ADMIN_PASSWORD:-geoserver}
      GEOSERVER_PROXY_BASE_URL: https://cruisedb.corp.spc.int/geoserver
    volumes:
      - kartoza_geoserver_data:/opt/geoserver/data_dir
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/geoserver/web/" ]
      interval: 30s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    restart: unless-stopped
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics -q ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:latest
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        USER_ID: ${UID}
        GROUP_ID: ${GID}
    command: gunicorn --bind 0.0.0.0:8000 --workers 9 --worker-class sync --timeout 120 --preload --access-logfile - --error-logfile - pacific_cruises.wsgi:application
    env_file:
      - .env
    volumes:
      - static_volume:/code/staticfiles:rw
      - media_volume:/code/media:rw
    environment:
      - DJANGO_SETTINGS_MODULE=pacific_cruises.settings
    working_dir: /code
    ports:
      - "8000:8000"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000/ || exit 1" ]
      interval: 90s
      timeout: 30s
      retries: 5
      start_period: 30s
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      geoserver:
        condition: service_healthy
    networks:
      - backend

  celery:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        USER_ID: ${UID}
        GROUP_ID: ${GID}
    command: celery -A pacific_cruises worker --loglevel=info
    env_file:
      - .env
    volumes:
      - static_volume:/code/staticfiles:rw
      - media_volume:/code/media:rw
    working_dir: /code
    ports:
      - "8001:8000"  # Optional: Expose if needed
    healthcheck:
      test: [ "CMD-SHELL", "celery -A pacific_cruises inspect ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      geoserver:
        condition: service_healthy
    networks:
      - backend

  nginx:
    image: nginx:latest
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certificates:/etc/nginx/ssl:ro
      - static_volume:/code/staticfiles:ro
      - media_volume:/code/media:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      web:
        condition: service_started
    networks:
      - backend

volumes:
  #postgres_data: {}  # If unused, consider removing
  static_volume:
  media_volume:
  db_data:
  kartoza_geoserver_data:

networks:
  backend:
    driver: bridge
