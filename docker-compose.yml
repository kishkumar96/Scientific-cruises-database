

services:
  db:
    image: postgis/postgis:15-3.3
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DB: ${POSTGRES_DB:-cruise}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
  geoserver:
    image: kartoza/geoserver:2.25.2
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      GEOWEBCACHE_CACHE_DIR: /opt/geoserver/data_dir/gwc
      INITIAL_MEMORY: 4G
      Max_MEMORY: 8G
      RESET_ADMIN_CREDENTIALS: TRUE

      GEOSERVER_ADMIN_USER: admin
      GEOSERVER_ADMIN_PASSWORD: myawesomegeoserver
      GEOSERVER_PROXY_BASE_URL: https://cruisedb.corp.spc.int/geoserver
    volumes:
      - kartoza_geoserver_data:/opt/geoserver/data_dir
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/geoserver/web/" ]
      interval: 30s
      timeout: 10s
      retries: 5

  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        USER_ID: ${UID:-1000}
        GROUP_ID: ${GID:-1000}
    command: gunicorn --bind 0.0.0.0:8000 --workers 9 pacific_cruises.wsgi:application
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - static_volume:/code/staticfiles

  celery:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        USER_ID: ${UID:-1000}
        GROUP_ID: ${GID:-1000}
    command: celery -A pacific_cruises worker --loglevel=info --prefetch-multiplier=1 --concurrency=4
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend

  redis:
    image: redis:alpine
    command: redis-server --appendonly yes
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  rabbitmq:
    image: rabbitmq:management
    restart: unless-stopped
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - backend
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: Rabbit
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:latest
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/code/staticfiles:ro
      - media_volume:/code/media:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      web:
        condition: service_healthy
    networks:
      - backend

volumes:
  db_data:
  static_volume:
  media_volume:
  kartoza_geoserver_data:


networks:
  backend:
    driver: bridge
