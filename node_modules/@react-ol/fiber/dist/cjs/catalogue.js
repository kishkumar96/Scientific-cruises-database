"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.extend = exports.catalogue = void 0;
var _fp = require("lodash/fp");
var olRaw = _interopRequireWildcard(require("ol"));
var olLayerRaw = _interopRequireWildcard(require("ol/layer"));
var olControlRaw = _interopRequireWildcard(require("ol/control"));
var olInteractionRaw = _interopRequireWildcard(require("ol/interaction"));
var olSourceRaw = _interopRequireWildcard(require("ol/source"));
var olGeomRaw = _interopRequireWildcard(require("ol/geom"));
var olStyleRaw = _interopRequireWildcard(require("ol/style"));
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
// /////////////////////////////////////////////////////////////////////////////
// Here we define what we omit: abstract base classes, utility classes and other weird stuff
var olOmitKeys = [
    "defaults",
    "AssertionError",
    "Disposable",
    "Graticule",
    "Image",
    "ImageBase",
    "ImageCanvas",
    "ImageTile",
    "Kinetic",
    "MapBrowserEvent",
    "MapBrowserEventHandler",
    "MapEvent",
    "Tile",
    "TileQueue",
    "TileRange",
    "VectorRenderTile",
    "VectorTile",
    "getUid",
    "VERSION", 
];
var olLayerOmitKeys = [];
var olControlOmitKeys = [
    "defaults"
];
var olInteractionOmitKeys = [
    "defaults"
];
var olSourceOmitKeys = [
    "Image",
    "Source",
    "Tile",
    "sourcesFromTileGrid"
];
var olGeomOmitKeys = [
    "Geometry",
    "SimpleGeometry"
];
var olStyleOmitKeys = [
    "Image",
    "IconImage"
];
// /////////////////////////////////////////////////////////////////////////////
// Here we do omit things listed above
var ol = (0, _fp).omit(olOmitKeys, olRaw);
var olLayer = (0, _fp).omit(olLayerOmitKeys, olLayerRaw);
var olControl = (0, _fp).omit(olControlOmitKeys, olControlRaw);
var olInteraction = (0, _fp).omit(olInteractionOmitKeys, olInteractionRaw);
var olSource = (0, _fp).omit(olSourceOmitKeys, olSourceRaw);
var olGeom = (0, _fp).omit(olGeomOmitKeys, olGeomRaw);
var olStyle = (0, _fp).omit(olStyleOmitKeys, olStyleRaw);
// /////////////////////////////////////////////////////////////////////////////
// Catalogue Values
var catalogueOl = Object.fromEntries(Object.entries(ol).map(function(param) {
    var _param = _slicedToArray(param, 2), key = _param[0], value = _param[1];
    return [
        "ol".concat((0, _fp).upperFirst(key)),
        {
            kind: key,
            type: "ol".concat((0, _fp).upperFirst(key)),
            object: value
        }, 
    ];
}));
var catalogueOlLayer = Object.fromEntries(Object.entries(olLayer).map(function(param) {
    var _param = _slicedToArray(param, 2), key = _param[0], value = _param[1];
    return [
        "olLayer".concat((0, _fp).upperFirst(key)),
        {
            kind: "Layer",
            type: "olLayer".concat((0, _fp).upperFirst(key)),
            object: value
        }, 
    ];
}));
var catalogueOlControl = Object.fromEntries(Object.entries(olControl).map(function(param) {
    var _param = _slicedToArray(param, 2), key = _param[0], value = _param[1];
    return [
        "olControl".concat((0, _fp).upperFirst(key)),
        {
            kind: "Control",
            type: "olControl".concat((0, _fp).upperFirst(key)),
            object: value
        }, 
    ];
}));
var catalogueOlInteraction = Object.fromEntries(Object.entries(olInteraction).map(function(param) {
    var _param = _slicedToArray(param, 2), key = _param[0], value = _param[1];
    return [
        "olInteraction".concat((0, _fp).upperFirst(key)),
        {
            kind: "Interaction",
            type: "olInteraction".concat((0, _fp).upperFirst(key)),
            object: value
        }, 
    ];
}));
var catalogueOlSource = Object.fromEntries(Object.entries(olSource).map(function(param) {
    var _param = _slicedToArray(param, 2), key = _param[0], value = _param[1];
    return [
        "olSource".concat((0, _fp).upperFirst(key)),
        {
            kind: "Source",
            type: "olSource".concat((0, _fp).upperFirst(key)),
            object: value
        }, 
    ];
}));
var catalogueOlGeom = Object.fromEntries(Object.entries(olGeom).map(function(param) {
    var _param = _slicedToArray(param, 2), key = _param[0], value = _param[1];
    return [
        "olGeom".concat((0, _fp).upperFirst(key)),
        {
            kind: "Geom",
            type: "olGeom".concat((0, _fp).upperFirst(key)),
            object: value
        }, 
    ];
}));
var catalogueOlStyle = Object.fromEntries(Object.entries(olStyle).map(function(param) {
    var _param = _slicedToArray(param, 2), key = _param[0], value = _param[1];
    return [
        "olStyle".concat((0, _fp).upperFirst(key)),
        {
            kind: "Style",
            type: "olStyle".concat((0, _fp).upperFirst(key)),
            object: value
        }, 
    ];
}));
var catalogue = _objectSpread({}, catalogueOl, catalogueOlLayer, catalogueOlControl, catalogueOlInteraction, catalogueOlSource, catalogueOlGeom, catalogueOlStyle);
exports.catalogue = catalogue;
var extend = function(objects) {
    // Cleanup the input
    var cleanedUpObjects = (0, _fp).fromPairs((0, _fp).map(function(param) {
        var _param = _slicedToArray(param, 2), key = _param[0], value = _param[1];
        if (!(0, _fp).isObject(value.object)) {
            // If it's directly an object we put it nicely in a catalogue item
            return [
                (0, _fp).lowerFirst(key),
                {
                    type: (0, _fp).lowerFirst(key),
                    kind: null,
                    object: value
                }, 
            ];
        }
        // If it's already a catalogue item it's good
        return [
            (0, _fp).lowerFirst(key),
            _objectSpread({}, value, {
                type: (0, _fp).lowerFirst(key)
            }), 
        ];
    }, (0, _fp).toPairs(objects)));
    exports.catalogue = // Update the catalogue
    catalogue = _objectSpread({}, catalogue, cleanedUpObjects);
};
exports.extend = extend;
