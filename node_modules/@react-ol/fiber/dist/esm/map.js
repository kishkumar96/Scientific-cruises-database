function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
import React, { useRef, useEffect, useState, forwardRef } from "react";
import { isNull, isFunction, isNil } from "lodash/fp";
import { render } from "./renderer";
import { MapProvider } from "./context";
const defaultArgs = [
    {}
];
const defaultStyle = {
    width: "100%",
    height: "400px"
};
var Map = /*#__PURE__*/ forwardRef((_param, ref)=>{
    var { children , args =defaultArgs , style =defaultStyle , className , containerRef  } = _param, mapProps = _objectWithoutProperties(_param, [
        "children",
        "args",
        "style",
        "className",
        "containerRef"
    ]);
    const mapContainerRef = useRef(null);
    const [map, setMap] = useState(null);
    useEffect(()=>{
        if (mapContainerRef.current) {
            const wrapped = /*#__PURE__*/ React.createElement("olMap", _extends({}, mapProps, {
                args: args,
                target: mapContainerRef.current,
                ref: ref
            }), isNull(map) ? null : /*#__PURE__*/ React.createElement(MapProvider, {
                value: map
            }, children));
            const returnedMap = render(wrapped, mapContainerRef.current);
            if (isNull(map) && !isNull(returnedMap)) {
                setMap((oldMap)=>isNull(oldMap) ? returnedMap : oldMap
                );
            }
        }
    }, [
        children,
        mapContainerRef.current,
        map
    ]);
    const setRef = (value)=>{
        if (isNil(value)) {
            return;
        }
        if (isFunction(containerRef)) {
            containerRef(value);
        } else if (!isNil(containerRef)) {
            // eslint-disable-next-line no-param-reassign
            (containerRef).current = value;
        }
        if (isFunction(mapContainerRef)) {
            mapContainerRef(value);
        } else if (!isNil(mapContainerRef)) {
            // eslint-disable-next-line no-param-reassign
            (mapContainerRef).current = value;
        }
    };
    return /*#__PURE__*/ React.createElement("div", {
        style: style,
        className: className,
        ref: setRef
    });
});
export { Map };
