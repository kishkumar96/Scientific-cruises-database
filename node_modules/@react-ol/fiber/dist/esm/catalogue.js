function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}
// /////////////////////////////////////////////////////////////////////////////
// The catalogue is the list of object from openlayers that are supported
// it is generated automatically, and is strongly typed
// /////////////////////////////////////////////////////////////////////////////
import { upperFirst, lowerFirst, omit, fromPairs, toPairs, map, isObject } from "lodash/fp";
// /////////////////////////////////////////////////////////////////////////////
// Import stuff we want to use from Openlayers
import * as olRaw from "ol";
import * as olLayerRaw from "ol/layer";
import * as olControlRaw from "ol/control";
import * as olInteractionRaw from "ol/interaction";
import * as olSourceRaw from "ol/source";
import * as olGeomRaw from "ol/geom";
import * as olStyleRaw from "ol/style";
// /////////////////////////////////////////////////////////////////////////////
// Here we define what we omit: abstract base classes, utility classes and other weird stuff
const olOmitKeys = [
    "defaults",
    "AssertionError",
    "Disposable",
    "Graticule",
    "Image",
    "ImageBase",
    "ImageCanvas",
    "ImageTile",
    "Kinetic",
    "MapBrowserEvent",
    "MapBrowserEventHandler",
    "MapEvent",
    "Tile",
    "TileQueue",
    "TileRange",
    "VectorRenderTile",
    "VectorTile",
    "getUid",
    "VERSION", 
];
const olLayerOmitKeys = [];
const olControlOmitKeys = [
    "defaults"
];
const olInteractionOmitKeys = [
    "defaults"
];
const olSourceOmitKeys = [
    "Image",
    "Source",
    "Tile",
    "sourcesFromTileGrid"
];
const olGeomOmitKeys = [
    "Geometry",
    "SimpleGeometry"
];
const olStyleOmitKeys = [
    "Image",
    "IconImage"
];
// /////////////////////////////////////////////////////////////////////////////
// Here we do omit things listed above
const ol = omit(olOmitKeys, olRaw);
const olLayer = omit(olLayerOmitKeys, olLayerRaw);
const olControl = omit(olControlOmitKeys, olControlRaw);
const olInteraction = omit(olInteractionOmitKeys, olInteractionRaw);
const olSource = omit(olSourceOmitKeys, olSourceRaw);
const olGeom = omit(olGeomOmitKeys, olGeomRaw);
const olStyle = omit(olStyleOmitKeys, olStyleRaw);
// /////////////////////////////////////////////////////////////////////////////
// Catalogue Values
const catalogueOl = Object.fromEntries(Object.entries(ol).map(([key, value])=>[
        `ol${upperFirst(key)}`,
        {
            kind: key,
            type: `ol${upperFirst(key)}`,
            object: value
        }, 
    ]
));
const catalogueOlLayer = Object.fromEntries(Object.entries(olLayer).map(([key, value])=>[
        `olLayer${upperFirst(key)}`,
        {
            kind: "Layer",
            type: `olLayer${upperFirst(key)}`,
            object: value
        }, 
    ]
));
const catalogueOlControl = Object.fromEntries(Object.entries(olControl).map(([key, value])=>[
        `olControl${upperFirst(key)}`,
        {
            kind: "Control",
            type: `olControl${upperFirst(key)}`,
            object: value
        }, 
    ]
));
const catalogueOlInteraction = Object.fromEntries(Object.entries(olInteraction).map(([key, value])=>[
        `olInteraction${upperFirst(key)}`,
        {
            kind: "Interaction",
            type: `olInteraction${upperFirst(key)}`,
            object: value
        }, 
    ]
));
const catalogueOlSource = Object.fromEntries(Object.entries(olSource).map(([key, value])=>[
        `olSource${upperFirst(key)}`,
        {
            kind: "Source",
            type: `olSource${upperFirst(key)}`,
            object: value
        }, 
    ]
));
const catalogueOlGeom = Object.fromEntries(Object.entries(olGeom).map(([key, value])=>[
        `olGeom${upperFirst(key)}`,
        {
            kind: "Geom",
            type: `olGeom${upperFirst(key)}`,
            object: value
        }, 
    ]
));
const catalogueOlStyle = Object.fromEntries(Object.entries(olStyle).map(([key, value])=>[
        `olStyle${upperFirst(key)}`,
        {
            kind: "Style",
            type: `olStyle${upperFirst(key)}`,
            object: value
        }, 
    ]
));
// eslint-disable-next-line import/no-mutable-exports
export let catalogue = _objectSpread({}, catalogueOl, catalogueOlLayer, catalogueOlControl, catalogueOlInteraction, catalogueOlSource, catalogueOlGeom, catalogueOlStyle);
/// ////////////////////////////////////////////////////////////////////////
/// ////////////////////////////////////////////////////////////////////////////
// A way to extend the catalogue
export const extend = (objects)=>{
    // Cleanup the input
    const cleanedUpObjects = fromPairs(map(([key, value])=>{
        if (!isObject(value.object)) {
            // If it's directly an object we put it nicely in a catalogue item
            return [
                lowerFirst(key),
                {
                    type: lowerFirst(key),
                    kind: null,
                    object: value
                }, 
            ];
        }
        // If it's already a catalogue item it's good
        return [
            lowerFirst(key),
            _objectSpread({}, value, {
                type: lowerFirst(key)
            }), 
        ];
    }, toPairs(objects)));
    // Update the catalogue
    catalogue = _objectSpread({}, catalogue, cleanedUpObjects);
};
